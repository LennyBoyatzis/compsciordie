from collections import deque


def get_valid_neighbours(cell, grid):
    m, n = len(grid), len(grid[0])
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]

    adj_cells = [(cell[0] + v_off, cell[1] + h_off)
                 for v_off, h_off in directions]

    valid_cells = filter(lambda cell: 0 <= cell[0] < m and 0 <= cell[1] < n, adj_cells)
    return list(valid_cells)


def search(cell, grid, visited):
    queue = deque([cell])

    while queue:
        cell = queue.pop()
        if cell not in visited:
            visited.add(cell)
            neighbs = get_valid_neighbours(cell, grid)

            for neigh in neighbs:
                r, c = neigh
                if grid[r][c] == '1' and (r, c) not in visited:
                    queue.appendleft((r, c))


def num_islands(grid):
    island_count = 0

    if not grid:
        return island_count

    m, n = len(grid), len(grid[0])
    visited = set()

    for row in range(m):
        for col in range(n):
            if grid[row][col] == '1' and (row, col) not in visited:
                island_count += 1
                search((row, col), grid, visited)

    return island_count


if __name__ == '__main__':

    grid = [["1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],
            ["0","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],
            ["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],
            ["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
            ["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
            ["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],
            ["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],
            ["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],
            ["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],
            ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
            ["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],
            ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
            ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
            ["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],
            ["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],
            ["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],
            ["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],
            ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
            ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
            ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]

    result = num_islands(grid)
    print(f'result {result}')
